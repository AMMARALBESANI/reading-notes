## collection
In C#, a collection is a group of objects that can be treated as a single unit and can be dynamically resized as needed. C# provides several built-in collection classes in different namespaces: System. Collections, System.Collections.Generic, System.Collections.Concurrent, and System.Collections.Immutable. These classes offer standardized ways to store and manipulate related objects.

Here are some commonly used collection classes in C#:

- List<T>: A dynamic array that can be resized at runtime it allows adding, removing, and searching for elements.
- Dictionary<TKey, TValue>: A collection of key-value pairs that enables fast lookup based on keys.
- Queue<T>: Represents a -first-in -firstout FIFO data structure It supports adding and removing elements.
- Stack<T>: Represents a last-in  first-out LIFO data structure It supports adding and removing elements.
- HashSet<T>  collection that doesnt allow duplicate elements It provides methods for adding removing, and checking element presence.
- LinkedList<T>: Represents a doubly linked list. It supports adding, removing, and searching for elements.

## The System.Collections.Concurrent

-its namespace offers thread-safe collection classes suitable for multi-threaded applications Some examples are:

ConcurrentBag<T>: A thread-safe bag of objects accessible by multiple threads concurrently.
- ConcurrentDictionary<TKey, TValue>: A thread-safe dictionary with fast key-based lookup.
- ConcurrentQueue<T>: A thread-safe queue following the FIFO principle.
- ConcurrentStack<T>: A thread-safe stack following the LIFO principle.
  
## implement a collection of key-value pairs

-To implement a collection of key-value pairs, you can use the Dictionary<TKey, TValue> class, which provides efficient lookup usng keys. It is implemented as a hash table, making retrieval by key very fast (close to O(1)).

## LINQ (Language-Integrated Query)

is a powerful feature in C# that enables querying data from various sources, including collections implementing the IEnumerable<T> or IQueryable<T> interfaces.

## Iterators

-iterators are used forloop custom iterations over a collection The yield return statement is used to return elements one at a time, and the iterator is invoked using a foreach statement.

## Enums

Enumeration types (enums) in C# are value types that define a set of named constants. Enums can be used to represent related constants with an underlying integral type.

Enums can also be used as bit flags in C#. Bit flags are binary values with one or more bits set to 1 or 0, representing Boolean values.
 
-The SystemEnum class serves as the base clas for all enumeration types in C# It offers methods like ToString(), Parse(), GetValues(), GetNames(), and IsDefined() for working with enumeration values.

## Conversions

-conversions are available between enumeration types and their underlying integral types Explicit conversions can be done by casting an enu value to its underlying type.

-The EnumisDefined method is used to check if an enumeration type contains an enum member with a specific associated value.

-Enums can be boxed and unboxed to and from the SystemEnum type.
